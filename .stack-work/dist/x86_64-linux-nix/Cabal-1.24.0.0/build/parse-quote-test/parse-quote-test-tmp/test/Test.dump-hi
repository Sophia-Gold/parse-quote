
==================== FINAL INTERFACE ====================
2018-03-05 02:45:10.82735924 UTC

interface main@main:Main 8001
  interface hash: 99393372f372de03bb0b753b3e0a5ac7
  ABI hash: cf4cc5782af772629065a0108d28d98e
  export-list hash: 3ec0743114ce2959e3409965b7545482
  orphan hash: 92f82ee494bec60d680ab4491206cca0
  flag hash: 9f2c17ccb8be2d8411718605feaad0f6
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.tests
module dependencies:
package dependencies: Kospi200-0.1.0.0@Kospi200-0.1.0.0-5f0qVDa4zY8ELyDYUQlvZ5
                      ansi-terminal-0.6.3@ansi-terminal-0.6.3-IjphRY721wqJl2NJA5qPEj
                      ansi-wl-pprint-0.6.7.3@ansi-wl-pprint-0.6.7.3-1E9Tnw5zbIM9zWjP4Y7EaL
                      array-0.5.1.1@array-0.5.1.1
                      async-2.1.1.1@async-2.1.1.1-JMSH0FTb925BZBj7SwNxDH
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-Cmi9L1tD69wIVoI0nVzEDR
                      base-4.9.0.0
                      base-compat-0.9.3@base-compat-0.9.3-DrSgCcixJxxKb6RsGgHyiF
                      base-orphans-0.5.4@base-orphans-0.5.4-5IQvrjd7gNP548VkOOyIq6
                      bifunctors-5.4.2@bifunctors-5.4.2-Fvyg0vMaKqJGa1IztK92n
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      clock-0.7.2@clock-0.7.2-1F3tpzhSilhF4wqwyRWqgE
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      generic-deriving-1.11.2@generic-deriving-1.11.2-51phHL1YkkUJW3eGVFsGBO
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      hashable-1.2.4.0@hashable-1.2.4.0-K5YnQdcMHnN9yDGPADESBF
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG
                      optparse-applicative-0.12.1.0@optparse-applicative-0.12.1.0-DaRxepbEB7v12fB3H3uUKs
                      parsec-3.1.11@parsec-3.1.11-E4tgqT80F0dG3yYaHwJt2
                      pcap-0.4.5.2@pcap-0.4.5.2-Gjz0tmyqUIIIegUSnQKf75
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      process-1.4.2.0@process-1.4.2.0
                      regex-base-0.93.2@regex-base-0.93.2-4lnOy3Rb1yfISFVEXVfJuH
                      regex-tdfa-1.2.2@regex-tdfa-1.2.2-FWK6eBRpYNTAJRcb8H2pBV
                      scientific-0.3.4.9@scientific-0.3.4.9-KFqAPDIQwA03kBkDAVdGL7
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx
                      tasty-0.11.2.1@tasty-0.11.2.1-FcYQbgdKffeHDMNZzP00Hz
                      tasty-hunit-0.9.2@tasty-hunit-0.9.2-C7VvfPSsnGFE7liCQnluCU
                      template-haskell-2.11.0.0
                      text-1.2.2.2@text-1.2.2.2-FIorhdfEwKc4H3v6Mihn0y
                      text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s
                      th-lift-0.7.7@th-lift-0.7.7-JuNRTOt9I9JCRNDoGbQTGn
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-81lZyuOJOvsD0zyCv2TKld
                      unbounded-delays-0.1.1.0@unbounded-delays-0.1.1.0-DDUOQpbBpLjIuQvgx5NepI
                      unix-2.7.2.0@unix-2.7.2.0
                      vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6
orphans: Kospi200-0.1.0.0@Kospi200-0.1.0.0-5f0qVDa4zY8ELyDYUQlvZ5:Parser.Types
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-Cmi9L1tD69wIVoI0nVzEDR:Data.Attoparsec.ByteString.Char8
         base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.4.0@hashable-1.2.4.0-K5YnQdcMHnN9yDGPADESBF:Data.Hashable.Generic
         network-2.6.3.1@network-2.6.3.1-G4Up1CPKbp7DeFsnywOnGG:Network.Socket
         regex-base-0.93.2@regex-base-0.93.2-4lnOy3Rb1yfISFVEXVfJuH:Text.Regex.Base.Context
         regex-tdfa-1.2.2@regex-tdfa-1.2.2-FWK6eBRpYNTAJRcb8H2pBV:Text.Regex.TDFA.ByteString
         regex-tdfa-1.2.2@regex-tdfa-1.2.2-FWK6eBRpYNTAJRcb8H2pBV:Text.Regex.TDFA.ByteString.Lazy
         regex-tdfa-1.2.2@regex-tdfa-1.2.2-FWK6eBRpYNTAJRcb8H2pBV:Text.Regex.TDFA.Sequence
         regex-tdfa-1.2.2@regex-tdfa-1.2.2-FWK6eBRpYNTAJRcb8H2pBV:Text.Regex.TDFA.String
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         text-1.2.2.2@text-1.2.2.2-FIorhdfEwKc4H3v6Mihn0y:Data.Text
         text-1.2.2.2@text-1.2.2.2-FIorhdfEwKc4H3v6Mihn0y:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-FIorhdfEwKc4H3v6Mihn0y:Data.Text.Show
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Control.Applicative
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Control.Concurrent
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Control.Exception
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Control.Monad.ST
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Array
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Bool
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.ByteString
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Char
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Complex
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Data
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Dynamic
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Either
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Fixed
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Floating
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Functor.Compose
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Functor.Identity
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Functor.Product
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Functor.Sum
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Integral
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.List
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.List.NonEmpty
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Maybe
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Monoid
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Ord
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Proxy
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Ratio
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Semigroup
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Text
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Tuple
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Type.Coercion
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Type.Equality
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Typeable
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Version
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Void
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Foreign.C.Types
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Foreign.Ptr
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.GHC.Event
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.GHC.Fingerprint
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.GHC.Generics
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.GHC.RTS.Flags
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.GHC.Stack
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.GHC.StaticPtr
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.GHC.Stats
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.GHC.TypeLits
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Numeric.Natural
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.System.Exit
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.System.IO
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.System.Posix.Types
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.TH
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Text.Read
         th-lift-0.7.7@th-lift-0.7.7-JuNRTOt9I9JCRNDoGbQTGn:Language.Haskell.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector.Fusion.Bundle
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-Cmi9L1tD69wIVoI0nVzEDR:Data.Attoparsec.Internal.Types
                         base-4.9.0.0:Control.Applicative base-4.9.0.0:Data.Complex
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Compose
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.Functor.Product base-4.9.0.0:Data.Functor.Sum
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         clock-0.7.2@clock-0.7.2-1F3tpzhSilhF4wqwyRWqgE:System.Clock
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx:Data.Tagged
                         tasty-0.11.2.1@tasty-0.11.2.1-FcYQbgdKffeHDMNZzP00Hz:Test.Tasty.Core
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-FIorhdfEwKc4H3v6Mihn0y:Data.Text
                         text-1.2.2.2@text-1.2.2.2-FIorhdfEwKc4H3v6Mihn0y:Data.Text.Lazy
                         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.FromStringTextShow
                         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Options
                         vector-0.11.0.0@vector-0.11.0.0-BEDZb5o2QOhGbIm6ky7rl6:Data.Vector
import  -/  Kospi200-0.1.0.0@Kospi200-0.1.0.0-5f0qVDa4zY8ELyDYUQlvZ5:Capture 4cc63b2b95200c6277cef80bed35bd9b
import  -/  Kospi200-0.1.0.0@Kospi200-0.1.0.0-5f0qVDa4zY8ELyDYUQlvZ5:Parser ce341b73e42680134576b30564b03e96
import  -/  base-4.9.0.0:Control.Concurrent.MVar 8e69a5596a64b6487076dea38478815b
import  -/  base-4.9.0.0:GHC.MVar 5a1706a0bf7a7186672dad8d28229b31
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Char8 49426525406a134b63e5a11b574dbd77
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Internal 1a31a1f30d9522329d9076dffd947c78
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base 1e8d61dcc59a1a983b27bab6fd6bdcaf
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict 2597c3599012c0fa55c30f93a0324f00
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  pcap-0.4.5.2@pcap-0.4.5.2-Gjz0tmyqUIIIegUSnQKf75:Network.Pcap b31a67a11ed100657bbe9aadfbe54aaa
import  -/  tasty-0.11.2.1@tasty-0.11.2.1-FcYQbgdKffeHDMNZzP00Hz:Test.Tasty 7a8c38480c5bc3622f9a8a6d95725bea
import  -/  tasty-0.11.2.1@tasty-0.11.2.1-FcYQbgdKffeHDMNZzP00Hz:Test.Tasty.Core 8e400a33ecbc3152adc53653407398d6
import  -/  tasty-hunit-0.9.2@tasty-hunit-0.9.2-C7VvfPSsnGFE7liCQnluCU:Test.Tasty.HUnit f5a76fbb20ab695d4cf18f8a34faeb09
import  -/  tasty-hunit-0.9.2@tasty-hunit-0.9.2-C7VvfPSsnGFE7liCQnluCU:Test.Tasty.HUnit.Orig bab71b1fb0dcd8aae3c0744eee337d07
import  -/  text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow 13785a1dbb0cfed764149726c76da6e9
import  -/  text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Classes faea75731567116a233e6f8618e2a49c
5812a15f6f06716444bbf7855c1f75fa
  $s$fTextShow(,) ::
    TextShow.Classes.TextShow
      (Data.Time.Clock.Scale.DiffTime, Parser.Types.Packet)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Time.Clock.Scale.DiffTime, Parser.Types.Packet)
                  (TextShow.Data.Tuple.$fTextShow(,)_$cshowbPrec
                     @ Data.Time.Clock.Scale.DiffTime
                     @ Parser.Types.Packet
                     Parser.Types.$fTextShowDiffTime
                     Parser.Types.$fTextShowPacket)
                  Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowb
                  Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowbList
                  Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowtPrec
                  (TextShow.Data.Tuple.$fTextShow(,)_$cshowt
                     @ Data.Time.Clock.Scale.DiffTime
                     @ Parser.Types.Packet
                     Parser.Types.$fTextShowDiffTime
                     Parser.Types.$fTextShowPacket)
                  Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowtList
                  Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowtlPrec
                  Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowtl
                  Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowtlList -}
c24bb9fb250d6c9411365489798c5bb0
  $s$fTextShow(,)_$s$fTextShow(,)_$cshowb ::
    (Data.Time.Clock.Scale.DiffTime, Parser.Types.Packet)
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 1, Strictness: <S,1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: (Data.Time.Clock.Scale.DiffTime,
                            Parser.Types.Packet)) ->
                 TextShow.Data.Tuple.$fTextShow(,)_$cshowbPrec
                   @ Data.Time.Clock.Scale.DiffTime
                   @ Parser.Types.Packet
                   Parser.Types.$fTextShowDiffTime
                   Parser.Types.$fTextShowPacket
                   (GHC.Types.I# 0#)
                   eta) -}
0164e3b5bf1e592aea3b146f20698fa5
  $s$fTextShow(,)_$s$fTextShow(,)_$cshowbList ::
    [(Data.Time.Clock.Scale.DiffTime, Parser.Types.Packet)]
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [(Data.Time.Clock.Scale.DiffTime,
                             Parser.Types.Packet)]) ->
                 TextShow.Classes.showbListWith
                   @ (Data.Time.Clock.Scale.DiffTime, Parser.Types.Packet)
                   Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowb
                   eta) -}
8cf207199d8379eebd897998528353e3
  $s$fTextShow(,)_$s$fTextShow(,)_$cshowtList ::
    [(Data.Time.Clock.Scale.DiffTime, Parser.Types.Packet)]
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [(Data.Time.Clock.Scale.DiffTime,
                             Parser.Types.Packet)]) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowtlList eta))) -}
30ef92e3fcf5c0719d053eda16ada5cc
  $s$fTextShow(,)_$s$fTextShow(,)_$cshowtPrec ::
    GHC.Types.Int
    -> (Data.Time.Clock.Scale.DiffTime, Parser.Types.Packet)
    -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <L,A><S,1*U(U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: GHC.Types.Int)
                   (x :: (Data.Time.Clock.Scale.DiffTime, Parser.Types.Packet)) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowtlPrec p x))) -}
8b21c980cc9707ee5e4e55aa8799aee3
  $s$fTextShow(,)_$s$fTextShow(,)_$cshowtl ::
    (Data.Time.Clock.Scale.DiffTime, Parser.Types.Packet)
    -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <S,1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: (Data.Time.Clock.Scale.DiffTime,
                            Parser.Types.Packet)) ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (TextShow.Data.Tuple.$fTextShow(,)_$cshowbPrec
                      @ Data.Time.Clock.Scale.DiffTime
                      @ Parser.Types.Packet
                      Parser.Types.$fTextShowDiffTime
                      Parser.Types.$fTextShowPacket
                      (GHC.Types.I# 0#)
                      eta)) -}
fb66103f9608c509516fad7c354c68bf
  $s$fTextShow(,)_$s$fTextShow(,)_$cshowtlList ::
    [(Data.Time.Clock.Scale.DiffTime, Parser.Types.Packet)]
    -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [(Data.Time.Clock.Scale.DiffTime,
                             Parser.Types.Packet)]) ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowbList eta)) -}
d1fb75125c7323d577c13b1e0d43f5fa
  $s$fTextShow(,)_$s$fTextShow(,)_$cshowtlPrec ::
    GHC.Types.Int
    -> (Data.Time.Clock.Scale.DiffTime, Parser.Types.Packet)
    -> Data.Text.Internal.Lazy.Text
  {- Arity: 2, Strictness: <L,A><S,1*U(U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: GHC.Types.Int)
                   (x :: (Data.Time.Clock.Scale.DiffTime, Parser.Types.Packet)) ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (TextShow.Data.Tuple.$fTextShow(,)_$cshowbPrec
                      @ Data.Time.Clock.Scale.DiffTime
                      @ Parser.Types.Packet
                      Parser.Types.$fTextShowDiffTime
                      Parser.Types.$fTextShowPacket
                      p
                      x)) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
74732463543054796a1d430ee2bb5d4c
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
409f4fa4278e85fb98b56a4cdfea79dd
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.Tasty.CmdLine.defaultMainWithIngredients1
                   Test.Tasty.defaultIngredients
                   Main.tests) -}
cb432a971a8e206275390459dba027b9
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
cb37cd1690e4c440a75773402fe19cf3
  tests :: Test.Tasty.Core.TestTree
  {- Strictness: m2,
     Unfolding: (Test.Tasty.Core.TestGroup Main.tests21 Main.tests1) -}
6b10fa48762bccb5f0b51031d5386c2c
  tests1 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests14
                   Main.tests2) -}
345bde8fb35d43bec666eebd999104b9
  tests10 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests13
                   Main.tests11
                     `cast`
                   (Trans
                        (Sym (GHC.Types.N:IO[0] <[GHC.Types.Char]>_R))
                        (Sym (Test.Tasty.HUnit.N:TestCase[0])))) -}
22e38de765fbb7934524cee2d9180e80
  tests11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta1 :: GHC.Prim.State#
                              GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ (Data.Map.Base.Map Parser.Types.AcceptTime Parser.Types.Packet)
                        eta1 of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ (Data.Map.Base.Map Parser.Types.AcceptTime Parser.Types.Packet)
                        ipv1
                        (Data.Map.Base.Tip @ Parser.Types.AcceptTime @ Parser.Types.Packet)
                        ipv of s2# { DEFAULT ->
                 case GHC.IO.Encoding.getForeignEncoding1 of wild { (,) getForeignEncoding5 setForeignEncoding1 ->
                 case getForeignEncoding5
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R)
                        s2# of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Foreign.charIsRepresentable3
                        @ (GHC.ForeignPtr.ForeignPtr Network.Pcap.Base.PcapTag)
                        ipv3
                        Main.tests8
                        Network.Pcap.Base.openOffline2
                          `cast`
                        (<Foreign.C.String.CString>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <GHC.ForeignPtr.ForeignPtr Network.Pcap.Base.PcapTag>_R))
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 case Network.Pcap.Base.dispatch1
                        (case ipv5 of wild1 { GHC.ForeignPtr.ForeignPtr fo ds3 ->
                         GHC.Ptr.Ptr @ Network.Pcap.Base.PcapTag fo })
                        Main.tests7
                        (let {
                           w :: Capture.Types.AcceptTimeBuffer {- Strictness: m -}
                           = GHC.MVar.MVar
                               @ (Data.Map.Base.Map Parser.Types.AcceptTime Parser.Types.Packet)
                               ipv1
                         } in
                         (\ (w1 :: Network.Pcap.Base.PktHdr)
                            (w2 :: GHC.Ptr.Ptr GHC.Word.Word8)[OneShot]
                            (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          case w1 of ww { Network.Pcap.Base.PktHdr ww1 ww2 ww3 ww4 ->
                          case w2 of ww5 { GHC.Ptr.Ptr ww6 ->
                          let {
                            x :: GHC.Prim.Int# = GHC.Prim.word2Int# ww3
                          } in
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<# x 0#) of wild1 {
                            GHC.Types.False
                            -> case GHC.Prim.newPinnedByteArray#
                                      @ GHC.Prim.RealWorld
                                      x
                                      w3 of ds3 { (#,#) ipv6 ipv7 ->
                               let {
                                 ipv8 :: GHC.Prim.Addr#
                                 = GHC.Prim.byteArrayContents#
                                     ipv7
                                       `cast`
                                     (UnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                   GHC.Prim.RealWorld) GHC.Prim.ByteArray#)
                               } in
                               case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 memcpy GHC.Prim.Addr#
                                                                                                -> GHC.Prim.Addr#
                                                                                                -> GHC.Prim.Word#
                                                                                                -> GHC.Prim.State#
                                                                                                     GHC.Prim.RealWorld
                                                                                                -> (# GHC.Prim.State#
                                                                                                        GHC.Prim.RealWorld,
                                                                                                      GHC.Prim.Addr# #)}
                                      ipv8
                                      ww6
                                      ww3
                                      ipv6 of wild2 { (#,#) ds4 ds5 ->
                               let {
                                 ipv9 :: GHC.ForeignPtr.ForeignPtrContents
                                 = GHC.ForeignPtr.PlainPtr ipv7
                               } in
                               case GHC.Prim.touch#
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.ForeignPtr.ForeignPtrContents
                                      ipv9
                                      ds4 of s' { DEFAULT ->
                               Capture.$wenqueueAcceptOrd
                                 w
                                 (Data.ByteString.Internal.PS ipv8 ipv9 0# x)
                                 s' } } }
                            GHC.Types.True
                            -> case GHC.ForeignPtr.mallocPlainForeignPtrBytes2
                               ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                               of {} } } })
                           `cast`
                         (<Network.Pcap.Base.PktHdr>_R
                          ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                          ->_R Sym (GHC.Types.N:IO[0] <()>_R)))
                        ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                 case ipv5 of wild1 { GHC.ForeignPtr.ForeignPtr ds4 r ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.PtrRepLifted
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r
                        ipv6 of s' { DEFAULT ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ (Data.Map.Base.Map Parser.Types.AcceptTime Parser.Types.Packet)
                        ipv1
                        s' of ds5 { (#,#) ipv8 ipv9 ->
                 case Test.Tasty.HUnit.Orig.@=?2
                        @ Data.Text.Internal.Text
                        Data.Text.$fEqText
                        Data.Text.Show.$fShowText
                        (GHC.Types.[] @ GHC.Types.Char)
                        Main.tests12
                        (Data.Text.concat
                           (Data.Text.Lazy.dropEnd_go
                              (Data.Text.Internal.Builder.$wtoLazyTextWith
                                 112#
                                 (TextShow.Classes.showbListWith
                                    @ (Data.Time.Clock.Scale.DiffTime, Parser.Types.Packet)
                                    Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowb
                                    (Data.Map.Base.toAscList1
                                       @ Data.Time.Clock.Scale.DiffTime
                                       @ Parser.Types.Packet
                                       (GHC.Types.[]
                                          @ (Data.Time.Clock.Scale.DiffTime, Parser.Types.Packet))
                                       ipv9)))))
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 (# ipv10, GHC.Types.[] @ GHC.Types.Char #) } } } } } } } } } }) -}
7a51ab9319de61e6ba4151a39af66a87
  tests12 :: Data.Text.Internal.Text
e1de997baacad231f133b46c23162dbf
  tests13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Quotes in order of accept time"#) -}
36c48331c779011f5e12ea1fcd1f0f56
  tests14 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests20
                   Main.tests15
                     `cast`
                   (Trans
                        (Sym (GHC.Types.N:IO[0] <[GHC.Types.Char]>_R))
                        (Sym (Test.Tasty.HUnit.N:TestCase[0])))) -}
fa6878656db3fc8c39d93fbbff60d6a4
  tests15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta1 :: GHC.Prim.State#
                              GHC.Prim.RealWorld)[OneShot] ->
                 case Test.Tasty.HUnit.Orig.@=?2
                        @ Data.Text.Internal.Text
                        Data.Text.$fEqText
                        Data.Text.Show.$fShowText
                        (GHC.Types.[] @ GHC.Types.Char)
                        Main.tests19
                        Main.tests16
                        eta1 of ds { (#,#) ipv ipv1 ->
                 (# ipv, GHC.Types.[] @ GHC.Types.Char #) }) -}
7cdeb0b4f9c34e524dd2447e2be164b7
  tests16 :: Data.Text.Internal.Text
  {- Unfolding: (TextShow.Data.Either.$fTextShowEither_$cshowt
                   @ [GHC.Types.Char]
                   @ (Parser.Types.AcceptTime, Parser.Types.Packet)
                   TextShow.Data.List.$fTextShow[]_$s$fTextShow[]1
                   Main.$s$fTextShow(,)
                   Main.tests17) -}
c7c090924561115cba1d1b4f0cc9ed6a
  tests17 ::
    Data.Either.Either
      GHC.Base.String (Parser.Types.AcceptTime, Parser.Types.Packet)
  {- Unfolding: (Parser.parsePkt Main.tests18) -}
12512a26cc23c7abf0a30b05a12ec627
  tests18 :: Data.ByteString.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 let {
                   addr# :: GHC.Prim.Addr#
                   = "B6034KR4301F3250500940000679900096000030800095000009400094000023100093000019900092000013400077890009700002340009800001300009900002820010000004150010100000520039700120007000800160009004590011001400170027000709002997"#
                 } in
                 case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 strlen GHC.Prim.Addr#
                                                                                  -> GHC.Prim.State#
                                                                                       GHC.Prim.RealWorld
                                                                                  -> (# GHC.Prim.State#
                                                                                          GHC.Prim.RealWorld,
                                                                                        GHC.Prim.Word# #)}
                        addr#
                        ipv of wild { (#,#) ds3 ds4 ->
                 Data.ByteString.Internal.PS
                   addr#
                   (GHC.ForeignPtr.PlainForeignPtr ipv1)
                   0#
                   (GHC.Prim.word2Int# ds4) } }) -}
a5d00bd0c6deb238b88a5c86dbef7017
  tests19 :: Data.Text.Internal.Text
dd9afc335a75dd8dd60c947463a60604
  tests2 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests10
                   Main.tests3) -}
8db427e8a9b7ca949d3ad71bb8f10172
  tests20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Parse one packet"#) -}
4bf8a7f79be31056a1a3728369de7b51
  tests21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Tests"#) -}
7aad3d0cb6997e6fb4e4dfceee3fc307
  tests3 :: [Test.Tasty.Core.TestTree]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.Tasty.Core.TestTree
                   Main.tests4
                   (GHC.Types.[] @ Test.Tasty.Core.TestTree)) -}
54b8a9c7112c42b04e85fd6759ab0d13
  tests4 :: Test.Tasty.Core.TestTree
  {- Unfolding: (Test.Tasty.Core.SingleTest
                   @ Test.Tasty.HUnit.TestCase
                   Test.Tasty.HUnit.$fIsTestTestCase
                   Main.tests9
                   Main.tests5
                     `cast`
                   (Trans
                        (Sym (GHC.Types.N:IO[0] <[GHC.Types.Char]>_R))
                        (Sym (Test.Tasty.HUnit.N:TestCase[0])))) -}
85eb1a4df456f099f91d66f0e7cf7c42
  tests5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta1 :: GHC.Prim.State#
                              GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ (Data.Map.Base.Map Parser.Types.PktTime Parser.Types.Packet)
                        eta1 of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.putMVar#
                        @ GHC.Prim.RealWorld
                        @ (Data.Map.Base.Map Parser.Types.PktTime Parser.Types.Packet)
                        ipv1
                        (Data.Map.Base.Tip @ Parser.Types.PktTime @ Parser.Types.Packet)
                        ipv of s2# { DEFAULT ->
                 case GHC.IO.Encoding.getForeignEncoding1 of wild { (,) getForeignEncoding5 setForeignEncoding1 ->
                 case getForeignEncoding5
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R)
                        s2# of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Foreign.charIsRepresentable3
                        @ (GHC.ForeignPtr.ForeignPtr Network.Pcap.Base.PcapTag)
                        ipv3
                        Main.tests8
                        Network.Pcap.Base.openOffline2
                          `cast`
                        (<Foreign.C.String.CString>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <GHC.ForeignPtr.ForeignPtr Network.Pcap.Base.PcapTag>_R))
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 case Network.Pcap.Base.dispatch1
                        (case ipv5 of wild1 { GHC.ForeignPtr.ForeignPtr fo ds3 ->
                         GHC.Ptr.Ptr @ Network.Pcap.Base.PcapTag fo })
                        Main.tests7
                        (let {
                           w :: GHC.MVar.MVar
                                  (Data.Map.Base.Map Parser.Types.PktTime Parser.Types.Packet)
                             {- Strictness: m -}
                           = GHC.MVar.MVar
                               @ (Data.Map.Base.Map Parser.Types.PktTime Parser.Types.Packet)
                               ipv1
                         } in
                         (\ (w1 :: Network.Pcap.Base.PktHdr)
                            (w2 :: GHC.Ptr.Ptr GHC.Word.Word8)[OneShot]
                            (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          case w1 of ww { Network.Pcap.Base.PktHdr ww1 ww2 ww3 ww4 ->
                          case w2 of ww5 { GHC.Ptr.Ptr ww6 ->
                          let {
                            x :: GHC.Prim.Int# = GHC.Prim.word2Int# ww3
                          } in
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<# x 0#) of wild1 {
                            GHC.Types.False
                            -> case GHC.Prim.newPinnedByteArray#
                                      @ GHC.Prim.RealWorld
                                      x
                                      w3 of ds3 { (#,#) ipv6 ipv7 ->
                               let {
                                 ipv8 :: GHC.Prim.Addr#
                                 = GHC.Prim.byteArrayContents#
                                     ipv7
                                       `cast`
                                     (UnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                   GHC.Prim.RealWorld) GHC.Prim.ByteArray#)
                               } in
                               case {__pkg_ccall bytestring-0.10.8.1@bytestring-0.10.8.1 memcpy GHC.Prim.Addr#
                                                                                                -> GHC.Prim.Addr#
                                                                                                -> GHC.Prim.Word#
                                                                                                -> GHC.Prim.State#
                                                                                                     GHC.Prim.RealWorld
                                                                                                -> (# GHC.Prim.State#
                                                                                                        GHC.Prim.RealWorld,
                                                                                                      GHC.Prim.Addr# #)}
                                      ipv8
                                      ww6
                                      ww3
                                      ipv6 of wild2 { (#,#) ds4 ds5 ->
                               let {
                                 ipv9 :: GHC.ForeignPtr.ForeignPtrContents
                                 = GHC.ForeignPtr.PlainPtr ipv7
                               } in
                               case GHC.Prim.touch#
                                      @ 'GHC.Types.PtrRepLifted
                                      @ GHC.ForeignPtr.ForeignPtrContents
                                      ipv9
                                      ds4 of s' { DEFAULT ->
                               Capture.enqueuePktOrd1
                                 w
                                 ww
                                 (Data.ByteString.Internal.PS ipv8 ipv9 0# x)
                                 s' } } }
                            GHC.Types.True
                            -> case GHC.ForeignPtr.mallocPlainForeignPtrBytes2
                               ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                               of {} } } })
                           `cast`
                         (<Network.Pcap.Base.PktHdr>_R
                          ->_R <GHC.Ptr.Ptr GHC.Word.Word8>_R
                          ->_R Sym (GHC.Types.N:IO[0] <()>_R)))
                        ipv4 of ds3 { (#,#) ipv6 ipv7 ->
                 case ipv5 of wild1 { GHC.ForeignPtr.ForeignPtr ds4 r ->
                 case GHC.Prim.touch#
                        @ 'GHC.Types.PtrRepLifted
                        @ GHC.ForeignPtr.ForeignPtrContents
                        r
                        ipv6 of s' { DEFAULT ->
                 case GHC.Prim.takeMVar#
                        @ GHC.Prim.RealWorld
                        @ (Data.Map.Base.Map Parser.Types.PktTime Parser.Types.Packet)
                        ipv1
                        s' of ds5 { (#,#) ipv8 ipv9 ->
                 case Test.Tasty.HUnit.Orig.@=?2
                        @ Data.Text.Internal.Text
                        Data.Text.$fEqText
                        Data.Text.Show.$fShowText
                        (GHC.Types.[] @ GHC.Types.Char)
                        Main.tests6
                        (Data.Text.concat
                           (Data.Text.Lazy.dropEnd_go
                              (Data.Text.Internal.Builder.$wtoLazyTextWith
                                 112#
                                 (TextShow.Classes.showbListWith
                                    @ (Data.Time.Clock.Scale.DiffTime, Parser.Types.Packet)
                                    Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowb
                                    (Data.Map.Base.toAscList1
                                       @ Data.Time.Clock.Scale.DiffTime
                                       @ Parser.Types.Packet
                                       (GHC.Types.[]
                                          @ (Data.Time.Clock.Scale.DiffTime, Parser.Types.Packet))
                                       ipv9)))))
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 (# ipv10, GHC.Types.[] @ GHC.Types.Char #) } } } } } } } } } }) -}
7d0b65a7307bf93af1f2fec4120c337e
  tests6 :: Data.Text.Internal.Text
e5e0670a6c2658882ae8783511b4ce08
  tests7 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 10#) -}
e2c32d1861d562ea22f9cd8a132b6b18
  tests8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "test/mdf-kospi200.20110216-0.pcap"#) -}
8f2285b81ba6b25da9ca4f15cb78d2c0
  tests9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Quotes in order of packet time"#) -}
"SPEC/Main $fTextShow(,) @ DiffTime @ Packet" [ALWAYS] forall ($dTextShow :: TextShow.Classes.TextShow
                                                                               Data.Time.Clock.Scale.DiffTime)
                                                              ($dTextShow1 :: TextShow.Classes.TextShow
                                                                                Parser.Types.Packet)
  TextShow.Data.Tuple.$fTextShow(,) @ Data.Time.Clock.Scale.DiffTime
                                    @ Parser.Types.Packet
                                    $dTextShow
                                    $dTextShow1
  = Main.$s$fTextShow(,)
"SPEC/Main $fTextShow(,)_$cshowb @ DiffTime @ Packet" [ALWAYS] forall ($dTextShow :: TextShow.Classes.TextShow
                                                                                       Data.Time.Clock.Scale.DiffTime)
                                                                      ($dTextShow1 :: TextShow.Classes.TextShow
                                                                                        Parser.Types.Packet)
  TextShow.Data.Tuple.$fTextShow(,)_$cshowb @ Data.Time.Clock.Scale.DiffTime
                                            @ Parser.Types.Packet
                                            $dTextShow
                                            $dTextShow1
  = Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowb
"SPEC/Main $fTextShow(,)_$cshowbList @ DiffTime @ Packet" [ALWAYS] forall ($dTextShow :: TextShow.Classes.TextShow
                                                                                           Data.Time.Clock.Scale.DiffTime)
                                                                          ($dTextShow1 :: TextShow.Classes.TextShow
                                                                                            Parser.Types.Packet)
  TextShow.Data.Tuple.$fTextShow(,)_$cshowbList @ Data.Time.Clock.Scale.DiffTime
                                                @ Parser.Types.Packet
                                                $dTextShow
                                                $dTextShow1
  = Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowbList
"SPEC/Main $fTextShow(,)_$cshowtList @ DiffTime @ Packet" [ALWAYS] forall ($dTextShow :: TextShow.Classes.TextShow
                                                                                           Data.Time.Clock.Scale.DiffTime)
                                                                          ($dTextShow1 :: TextShow.Classes.TextShow
                                                                                            Parser.Types.Packet)
  TextShow.Data.Tuple.$fTextShow(,)_$cshowtList @ Data.Time.Clock.Scale.DiffTime
                                                @ Parser.Types.Packet
                                                $dTextShow
                                                $dTextShow1
  = Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowtList
"SPEC/Main $fTextShow(,)_$cshowtPrec @ DiffTime @ Packet" [ALWAYS] forall ($dTextShow :: TextShow.Classes.TextShow
                                                                                           Data.Time.Clock.Scale.DiffTime)
                                                                          ($dTextShow1 :: TextShow.Classes.TextShow
                                                                                            Parser.Types.Packet)
  TextShow.Data.Tuple.$fTextShow(,)_$cshowtPrec @ Data.Time.Clock.Scale.DiffTime
                                                @ Parser.Types.Packet
                                                $dTextShow
                                                $dTextShow1
  = Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowtPrec
"SPEC/Main $fTextShow(,)_$cshowtl @ DiffTime @ Packet" [ALWAYS] forall ($dTextShow :: TextShow.Classes.TextShow
                                                                                        Data.Time.Clock.Scale.DiffTime)
                                                                       ($dTextShow1 :: TextShow.Classes.TextShow
                                                                                         Parser.Types.Packet)
  TextShow.Data.Tuple.$fTextShow(,)_$cshowtl @ Data.Time.Clock.Scale.DiffTime
                                             @ Parser.Types.Packet
                                             $dTextShow
                                             $dTextShow1
  = Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowtl
"SPEC/Main $fTextShow(,)_$cshowtlList @ DiffTime @ Packet" [ALWAYS] forall ($dTextShow :: TextShow.Classes.TextShow
                                                                                            Data.Time.Clock.Scale.DiffTime)
                                                                           ($dTextShow1 :: TextShow.Classes.TextShow
                                                                                             Parser.Types.Packet)
  TextShow.Data.Tuple.$fTextShow(,)_$cshowtlList @ Data.Time.Clock.Scale.DiffTime
                                                 @ Parser.Types.Packet
                                                 $dTextShow
                                                 $dTextShow1
  = Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowtlList
"SPEC/Main $fTextShow(,)_$cshowtlPrec @ DiffTime @ Packet" [ALWAYS] forall ($dTextShow :: TextShow.Classes.TextShow
                                                                                            Data.Time.Clock.Scale.DiffTime)
                                                                           ($dTextShow1 :: TextShow.Classes.TextShow
                                                                                             Parser.Types.Packet)
  TextShow.Data.Tuple.$fTextShow(,)_$cshowtlPrec @ Data.Time.Clock.Scale.DiffTime
                                                 @ Parser.Types.Packet
                                                 $dTextShow
                                                 $dTextShow1
  = Main.$s$fTextShow(,)_$s$fTextShow(,)_$cshowtlPrec
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

