
==================== FINAL INTERFACE ====================
2018-03-06 01:14:55.439255951 UTC

interface Kospi200-0.1.0.0-HbCXTMBKnMfBwS3lExfzgt:Parser.Types 8001
  interface hash: 698f4de85424f818ef91d916c7e4001c
  ABI hash: 64751bd3cafba4341766b2381cc96075
  export-list hash: 04f774dfe59faf05f443a4c86ff2abe6
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a587cbddee51cb99949c1fd782816b3c
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parser.Types.AcceptTime{Parser.Types.AcceptTime}
  Parser.Types.Asks
  Parser.Types.Bids
  Parser.Types.Packet{Parser.Types.Packet asks bids issueCode}
  Parser.Types.PktTime{Parser.Types.PktTime}
  Parser.Types.Quote{Parser.Types.Quote price quantity}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      base-compat-0.9.3@base-compat-0.9.3-DrSgCcixJxxKb6RsGgHyiF
                      base-orphans-0.5.4@base-orphans-0.5.4-5IQvrjd7gNP548VkOOyIq6
                      bifunctors-5.4.2@bifunctors-5.4.2-Fvyg0vMaKqJGa1IztK92n
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      generic-deriving-1.11.2@generic-deriving-1.11.2-51phHL1YkkUJW3eGVFsGBO
                      ghc-boot-th-8.0.1@ghc-boot-th-8.0.1 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx
                      template-haskell-2.11.0.0
                      text-1.2.2.2@text-1.2.2.2-FIorhdfEwKc4H3v6Mihn0y
                      text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s
                      text-show-instances-3.4@text-show-instances-3.4-E6Plh0nqx8KLmApOIpxLhE
                      th-lift-0.7.7@th-lift-0.7.7-JuNRTOt9I9JCRNDoGbQTGn
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-81lZyuOJOvsD0zyCv2TKld
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.2@text-1.2.2.2-FIorhdfEwKc4H3v6Mihn0y:Data.Text
         text-1.2.2.2@text-1.2.2.2-FIorhdfEwKc4H3v6Mihn0y:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-FIorhdfEwKc4H3v6Mihn0y:Data.Text.Show
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Control.Applicative
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Control.Concurrent
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Control.Exception
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Control.Monad.ST
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Array
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Bool
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.ByteString
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Char
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Complex
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Data
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Dynamic
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Either
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Fixed
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Floating
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Functor.Compose
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Functor.Identity
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Functor.Product
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Functor.Sum
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Integral
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.List
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.List.NonEmpty
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Maybe
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Monoid
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Ord
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Proxy
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Ratio
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Semigroup
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Text
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Tuple
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Type.Coercion
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Type.Equality
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Typeable
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Version
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.Void
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Foreign.C.Types
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Foreign.Ptr
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.GHC.Event
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.GHC.Fingerprint
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.GHC.Generics
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.GHC.RTS.Flags
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.GHC.Stack
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.GHC.StaticPtr
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.GHC.Stats
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.GHC.TypeLits
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Numeric.Natural
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.System.Exit
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.System.IO
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.System.Posix.Types
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.TH
         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Text.Read
         text-show-instances-3.4@text-show-instances-3.4-E6Plh0nqx8KLmApOIpxLhE:TextShow.Data.Time
         th-lift-0.7.7@th-lift-0.7.7-JuNRTOt9I9JCRNDoGbQTGn:Language.Haskell.TH.Lift
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Compose base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.Functor.Product base-4.9.0.0:Data.Functor.Sum
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         tagged-0.8.5@tagged-0.8.5-CtgV6EcN0do8F92i1S6iYx:Data.Tagged
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-FIorhdfEwKc4H3v6Mihn0y:Data.Text
                         text-1.2.2.2@text-1.2.2.2-FIorhdfEwKc4H3v6Mihn0y:Data.Text.Lazy
                         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.FromStringTextShow
                         text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Options
import  -/  base-4.9.0.0:Data.Semigroup 056371ce789bdfe8de829d3c46741740
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Char8 49426525406a134b63e5a11b574dbd77
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Internal 1a31a1f30d9522329d9076dffd947c78
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow 13785a1dbb0cfed764149726c76da6e9
import  -/  text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Classes faea75731567116a233e6f8618e2a49c
import  -/  text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.Data.ByteString 0435efd3249566cf88f8633d4a00bd50
import  -/  text-show-3.4@text-show-3.4-CAwfPPyFdWEJi3QBgKz62s:TextShow.TH 12839e59334be202fe61effa9b86da5c
import  -/  text-show-instances-3.4@text-show-instances-3.4-E6Plh0nqx8KLmApOIpxLhE:TextShow.Data.Time 795fe2dd03276b6caae2b8c1d4b787df
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock b91051c7767d1f23314064be1d4311d7
import  -/  time-1.6.0.1@time-1.6.0.1:Data.Time.Clock.Scale a496522dfed713797d33adfe44163f2c
804cfb8471d0f4443ec3a7a12454645c
  $fEqAcceptTime :: GHC.Classes.Eq Parser.Types.AcceptTime
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Parser.Types.AcceptTime
                  Parser.Types.$fEqAcceptTime_$c==
                  Parser.Types.$fEqAcceptTime_$c/= -}
804cfb8471d0f4443ec3a7a12454645c
  $fEqAcceptTime_$c/= ::
    Parser.Types.AcceptTime
    -> Parser.Types.AcceptTime -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Integer.Type.neqInteger
                  `cast`
                (Trans
                     (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                     (Trans
                          (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                          (Sym (Parser.Types.N:AcceptTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:AcceptTime[0])))
                 ->_R <GHC.Types.Bool>_R) -}
804cfb8471d0f4443ec3a7a12454645c
  $fEqAcceptTime_$c== ::
    Parser.Types.AcceptTime
    -> Parser.Types.AcceptTime -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Integer.Type.eqInteger
                  `cast`
                (Trans
                     (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                     (Trans
                          (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                          (Sym (Parser.Types.N:AcceptTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:AcceptTime[0])))
                 ->_R <GHC.Types.Bool>_R) -}
ebbb25f2f577a909efb832307243685a
  $fEqPktTime :: GHC.Classes.Eq Parser.Types.PktTime
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Parser.Types.PktTime
                  Parser.Types.$fEqPktTime_$c==
                  Parser.Types.$fEqPktTime_$c/= -}
ebbb25f2f577a909efb832307243685a
  $fEqPktTime_$c/= ::
    Parser.Types.PktTime -> Parser.Types.PktTime -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Integer.Type.neqInteger
                  `cast`
                (Trans
                     (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                     (Trans
                          (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                          (Sym (Parser.Types.N:PktTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:PktTime[0])))
                 ->_R <GHC.Types.Bool>_R) -}
ebbb25f2f577a909efb832307243685a
  $fEqPktTime_$c== ::
    Parser.Types.PktTime -> Parser.Types.PktTime -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Integer.Type.eqInteger
                  `cast`
                (Trans
                     (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                     (Trans
                          (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                          (Sym (Parser.Types.N:PktTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:PktTime[0])))
                 ->_R <GHC.Types.Bool>_R) -}
804cfb8471d0f4443ec3a7a12454645c
  $fOrdAcceptTime :: GHC.Classes.Ord Parser.Types.AcceptTime
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Parser.Types.AcceptTime
                  Parser.Types.$fEqAcceptTime
                  Parser.Types.$fOrdAcceptTime_$ccompare
                  Parser.Types.$fOrdAcceptTime_$c<
                  Parser.Types.$fOrdAcceptTime_$c<=
                  Parser.Types.$fOrdAcceptTime_$c>
                  Parser.Types.$fOrdAcceptTime_$c>=
                  Parser.Types.$fOrdAcceptTime_$cmax
                  Parser.Types.$fOrdAcceptTime_$cmin -}
804cfb8471d0f4443ec3a7a12454645c
  $fOrdAcceptTime_$c< ::
    Parser.Types.AcceptTime
    -> Parser.Types.AcceptTime -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Integer.Type.ltInteger
                  `cast`
                (Trans
                     (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                     (Trans
                          (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                          (Sym (Parser.Types.N:AcceptTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:AcceptTime[0])))
                 ->_R <GHC.Types.Bool>_R) -}
804cfb8471d0f4443ec3a7a12454645c
  $fOrdAcceptTime_$c<= ::
    Parser.Types.AcceptTime
    -> Parser.Types.AcceptTime -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Integer.Type.leInteger
                  `cast`
                (Trans
                     (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                     (Trans
                          (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                          (Sym (Parser.Types.N:AcceptTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:AcceptTime[0])))
                 ->_R <GHC.Types.Bool>_R) -}
804cfb8471d0f4443ec3a7a12454645c
  $fOrdAcceptTime_$c> ::
    Parser.Types.AcceptTime
    -> Parser.Types.AcceptTime -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Integer.Type.gtInteger
                  `cast`
                (Trans
                     (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                     (Trans
                          (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                          (Sym (Parser.Types.N:AcceptTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:AcceptTime[0])))
                 ->_R <GHC.Types.Bool>_R) -}
804cfb8471d0f4443ec3a7a12454645c
  $fOrdAcceptTime_$c>= ::
    Parser.Types.AcceptTime
    -> Parser.Types.AcceptTime -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Integer.Type.geInteger
                  `cast`
                (Trans
                     (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                     (Trans
                          (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                          (Sym (Parser.Types.N:AcceptTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:AcceptTime[0])))
                 ->_R <GHC.Types.Bool>_R) -}
804cfb8471d0f4443ec3a7a12454645c
  $fOrdAcceptTime_$ccompare ::
    Parser.Types.AcceptTime
    -> Parser.Types.AcceptTime -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Integer.Type.compareInteger
                  `cast`
                (Trans
                     (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                     (Trans
                          (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                          (Sym (Parser.Types.N:AcceptTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:AcceptTime[0])))
                 ->_R <GHC.Types.Ordering>_R) -}
804cfb8471d0f4443ec3a7a12454645c
  $fOrdAcceptTime_$cmax ::
    Parser.Types.AcceptTime
    -> Parser.Types.AcceptTime -> Parser.Types.AcceptTime
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Integer.Type.$fOrdInteger_$cmax
                  `cast`
                (Trans
                     (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                     (Trans
                          (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                          (Sym (Parser.Types.N:AcceptTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:AcceptTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:AcceptTime[0])))) -}
804cfb8471d0f4443ec3a7a12454645c
  $fOrdAcceptTime_$cmin ::
    Parser.Types.AcceptTime
    -> Parser.Types.AcceptTime -> Parser.Types.AcceptTime
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Integer.Type.$fOrdInteger_$cmin
                  `cast`
                (Trans
                     (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                     (Trans
                          (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                          (Sym (Parser.Types.N:AcceptTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:AcceptTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:AcceptTime[0])))) -}
ebbb25f2f577a909efb832307243685a
  $fOrdPktTime :: GHC.Classes.Ord Parser.Types.PktTime
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Parser.Types.PktTime
                  Parser.Types.$fEqPktTime
                  Parser.Types.$fOrdPktTime_$ccompare
                  Parser.Types.$fOrdPktTime_$c<
                  Parser.Types.$fOrdPktTime_$c<=
                  Parser.Types.$fOrdPktTime_$c>
                  Parser.Types.$fOrdPktTime_$c>=
                  Parser.Types.$fOrdPktTime_$cmax
                  Parser.Types.$fOrdPktTime_$cmin -}
ebbb25f2f577a909efb832307243685a
  $fOrdPktTime_$c< ::
    Parser.Types.PktTime -> Parser.Types.PktTime -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Integer.Type.ltInteger
                  `cast`
                (Trans
                     (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                     (Trans
                          (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                          (Sym (Parser.Types.N:PktTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:PktTime[0])))
                 ->_R <GHC.Types.Bool>_R) -}
ebbb25f2f577a909efb832307243685a
  $fOrdPktTime_$c<= ::
    Parser.Types.PktTime -> Parser.Types.PktTime -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Integer.Type.leInteger
                  `cast`
                (Trans
                     (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                     (Trans
                          (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                          (Sym (Parser.Types.N:PktTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:PktTime[0])))
                 ->_R <GHC.Types.Bool>_R) -}
ebbb25f2f577a909efb832307243685a
  $fOrdPktTime_$c> ::
    Parser.Types.PktTime -> Parser.Types.PktTime -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Integer.Type.gtInteger
                  `cast`
                (Trans
                     (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                     (Trans
                          (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                          (Sym (Parser.Types.N:PktTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:PktTime[0])))
                 ->_R <GHC.Types.Bool>_R) -}
ebbb25f2f577a909efb832307243685a
  $fOrdPktTime_$c>= ::
    Parser.Types.PktTime -> Parser.Types.PktTime -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Integer.Type.geInteger
                  `cast`
                (Trans
                     (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                     (Trans
                          (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                          (Sym (Parser.Types.N:PktTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:PktTime[0])))
                 ->_R <GHC.Types.Bool>_R) -}
ebbb25f2f577a909efb832307243685a
  $fOrdPktTime_$ccompare ::
    Parser.Types.PktTime -> Parser.Types.PktTime -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Integer.Type.compareInteger
                  `cast`
                (Trans
                     (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                     (Trans
                          (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                          (Sym (Parser.Types.N:PktTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:PktTime[0])))
                 ->_R <GHC.Types.Ordering>_R) -}
ebbb25f2f577a909efb832307243685a
  $fOrdPktTime_$cmax ::
    Parser.Types.PktTime
    -> Parser.Types.PktTime -> Parser.Types.PktTime
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Integer.Type.$fOrdInteger_$cmax
                  `cast`
                (Trans
                     (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                     (Trans
                          (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                          (Sym (Parser.Types.N:PktTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:PktTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:PktTime[0])))) -}
ebbb25f2f577a909efb832307243685a
  $fOrdPktTime_$cmin ::
    Parser.Types.PktTime
    -> Parser.Types.PktTime -> Parser.Types.PktTime
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                GHC.Integer.Type.$fOrdInteger_$cmin
                  `cast`
                (Trans
                     (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                     (Trans
                          (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                          (Sym (Parser.Types.N:PktTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:PktTime[0])))
                 ->_R Trans
                          (Sym (Data.Fixed.N:Fixed[0] <Data.Fixed.E12>_P))
                          (Trans
                               (Sym (Data.Time.Clock.Scale.N:DiffTime[0]))
                               (Sym (Parser.Types.N:PktTime[0])))) -}
804cfb8471d0f4443ec3a7a12454645c
  $fTextShowAcceptTime ::
    TextShow.Classes.TextShow Parser.Types.AcceptTime
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Parser.Types.AcceptTime
                  Parser.Types.$fTextShowAcceptTime_$cshowbPrec
                  Parser.Types.$fTextShowAcceptTime_$cshowb
                  Parser.Types.$fTextShowAcceptTime_$cshowbList
                  Parser.Types.$fTextShowAcceptTime_$cshowtPrec
                  Parser.Types.$fTextShowAcceptTime_$cshowt
                  Parser.Types.$fTextShowAcceptTime_$cshowtList
                  Parser.Types.$fTextShowAcceptTime_$cshowtlPrec
                  Parser.Types.$fTextShowAcceptTime_$cshowtl
                  Parser.Types.$fTextShowAcceptTime_$cshowtlList -}
5ddcc24fd4db191e30cbb53a84116e8a
  $fTextShowAcceptTime1 ::
    TextShow.FromStringTextShow.FromStringShow
      Data.Time.Clock.Scale.DiffTime
    -> Data.Text.Internal.Builder.Builder
  {- Unfolding: (TextShow.FromStringTextShow.$fTextShowFromStringShow_$cshowb
                   @ Data.Time.Clock.Scale.DiffTime
                   Data.Time.Clock.Scale.$fShowDiffTime) -}
804cfb8471d0f4443ec3a7a12454645c
  $fTextShowAcceptTime_$cshowb ::
    Parser.Types.AcceptTime -> Data.Text.Internal.Builder.Builder
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (ds :: Parser.Types.AcceptTime) ->
                 let {
                   ds1 :: Data.Text.Internal.Builder.Builder
                   = Parser.Types.$fTextShowAcceptTime1
                       ds
                         `cast`
                       (Sym (TextShow.FromStringTextShow.N:FromStringShow[0]
                                 (Sym (Parser.Types.N:AcceptTime[0]))))
                 } in
                 (\ @ s
                    (eta :: Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]) ->
                  let {
                    k :: Data.Text.Internal.Builder.Buffer s
                         -> GHC.ST.ST s [Data.Text.Internal.Text]
                    = ds1 `cast` (Data.Text.Internal.Builder.N:Builder[0]) @ s eta
                  } in
                  letrec {
                    $wloop :: GHC.Prim.MutableByteArray# s
                              -> GHC.Prim.Int#
                              -> GHC.Prim.Int#
                              -> GHC.Prim.Int#
                              -> [GHC.Types.Char]
                              -> GHC.Prim.State# s
                              -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
                      {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><S,U>,
                         Inline: [0] -}
                    = \ (ww :: GHC.Prim.MutableByteArray# s)
                        (ww1 :: GHC.Prim.Int#)
                        (ww2 :: GHC.Prim.Int#)
                        (ww3 :: GHC.Prim.Int#)
                        (w :: [GHC.Types.Char])
                        (w1 :: GHC.Prim.State# s)[OneShot] ->
                      case w of wild1 {
                        []
                        -> (k (Data.Text.Internal.Builder.Buffer @ s ww ww1 ww2 ww3))
                             `cast`
                           (GHC.ST.N:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                             w1
                        : ipv4 ipv5
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# ww3 1#) of wild2 {
                             GHC.Types.False
                             -> case ipv4 of wild3 { GHC.Types.C# c# ->
                                let {
                                  x :: GHC.Prim.Int# = GHC.Prim.ord# c#
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# x 65536#) of wild4 {
                                  GHC.Types.False
                                  -> let {
                                       i# :: GHC.Prim.Int# = GHC.Prim.+# ww1 ww2
                                     } in
                                     let {
                                       x# :: GHC.Prim.Int# = GHC.Prim.-# x 65536#
                                     } in
                                     case GHC.Prim.writeWord16Array#
                                            @ s
                                            ww
                                            i#
                                            (GHC.Prim.narrow16Word#
                                               (GHC.Prim.int2Word#
                                                  (GHC.Prim.+#
                                                     (GHC.Prim.uncheckedIShiftRA# x# 10#)
                                                     55296#)))
                                            w1 of s2# { DEFAULT ->
                                     case GHC.Prim.writeWord16Array#
                                            @ s
                                            ww
                                            (GHC.Prim.+# i# 1#)
                                            (GHC.Prim.narrow16Word#
                                               (GHC.Prim.int2Word#
                                                  (GHC.Prim.+# (GHC.Prim.andI# x# 1023#) 56320#)))
                                            s2# of s2#1 { DEFAULT ->
                                     $wloop
                                       ww
                                       ww1
                                       (GHC.Prim.+# ww2 2#)
                                       (GHC.Prim.-# ww3 2#)
                                       ipv5
                                       s2#1 } }
                                  GHC.Types.True
                                  -> case GHC.Prim.writeWord16Array#
                                            @ s
                                            ww
                                            (GHC.Prim.+# ww1 ww2)
                                            (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x))
                                            w1 of s2# { DEFAULT ->
                                     $wloop
                                       ww
                                       ww1
                                       (GHC.Prim.+# ww2 1#)
                                       (GHC.Prim.-# ww3 1#)
                                       ipv5
                                       s2# } } }
                             GHC.Types.True
                             -> case GHC.Prim.unsafeFreezeByteArray#
                                       @ s
                                       ww
                                       w1 of ds2 { (#,#) ipv6 ipv7 ->
                                case GHC.Prim.newByteArray#
                                       @ s
                                       224#
                                       ipv6 of ds3 { (#,#) ipv8 ipv9 ->
                                (# ipv8,
                                   GHC.Types.:
                                     @ Data.Text.Internal.Text
                                     (Data.Text.Internal.Text ipv7 ww1 ww2)
                                     (case $wloop
                                             ipv9
                                             0#
                                             0#
                                             112#
                                             wild1
                                             ipv8 of ds4 { (#,#) ipv10 ipv11 ->
                                      ipv11 }) #) } } } }
                  } in
                  \ (ds2 :: Data.Text.Internal.Builder.Buffer s)
                    (eta1 :: GHC.Prim.State# s)[OneShot] ->
                  case ds2 of wild { Data.Text.Internal.Builder.Buffer dt dt1 dt2 dt3 ->
                  $wloop dt dt1 dt2 dt3 Parser.Types.$fTextShowAcceptTime_str eta1 })
                   `cast`
                 (Trans
                      (forall (s :: <*>_N).
                       <Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                       ->_R <Data.Text.Internal.Builder.Buffer s>_R
                       ->_R Sym (GHC.ST.N:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                      (Sym (Data.Text.Internal.Builder.N:Builder[0])))) -}
804cfb8471d0f4443ec3a7a12454645c
  $fTextShowAcceptTime_$cshowbList ::
    [Parser.Types.AcceptTime] -> Data.Text.Internal.Builder.Builder
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Parser.Types.AcceptTime]) ->
                 TextShow.Classes.showbListWith
                   @ Parser.Types.AcceptTime
                   Parser.Types.$fTextShowAcceptTime_$cshowb
                   eta) -}
804cfb8471d0f4443ec3a7a12454645c
  $fTextShowAcceptTime_$cshowbPrec ::
    GHC.Types.Int
    -> Parser.Types.AcceptTime -> Data.Text.Internal.Builder.Builder
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Int) (eta :: Parser.Types.AcceptTime) ->
                 Parser.Types.$fTextShowAcceptTime_$cshowb eta) -}
804cfb8471d0f4443ec3a7a12454645c
  $fTextShowAcceptTime_$cshowt ::
    Parser.Types.AcceptTime -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (x :: Parser.Types.AcceptTime) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Data.Text.Internal.Builder.$wtoLazyTextWith
                         112#
                         (Parser.Types.$fTextShowAcceptTime_$cshowb x)))) -}
804cfb8471d0f4443ec3a7a12454645c
  $fTextShowAcceptTime_$cshowtList ::
    [Parser.Types.AcceptTime] -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Parser.Types.AcceptTime]) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Parser.Types.$fTextShowAcceptTime_$cshowtlList eta))) -}
804cfb8471d0f4443ec3a7a12454645c
  $fTextShowAcceptTime_$cshowtPrec ::
    GHC.Types.Int -> Parser.Types.AcceptTime -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: GHC.Types.Int) (x :: Parser.Types.AcceptTime) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Parser.Types.$fTextShowAcceptTime_$cshowtlPrec p x))) -}
804cfb8471d0f4443ec3a7a12454645c
  $fTextShowAcceptTime_$cshowtl ::
    Parser.Types.AcceptTime -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Parser.Types.AcceptTime) ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (Parser.Types.$fTextShowAcceptTime_$cshowb x)) -}
804cfb8471d0f4443ec3a7a12454645c
  $fTextShowAcceptTime_$cshowtlList ::
    [Parser.Types.AcceptTime] -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Parser.Types.AcceptTime]) ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (Parser.Types.$fTextShowAcceptTime_$cshowbList eta)) -}
804cfb8471d0f4443ec3a7a12454645c
  $fTextShowAcceptTime_$cshowtlPrec ::
    GHC.Types.Int
    -> Parser.Types.AcceptTime -> Data.Text.Internal.Lazy.Text
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: GHC.Types.Int) (x :: Parser.Types.AcceptTime) ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (Parser.Types.$fTextShowAcceptTime_$cshowb x)) -}
3f3c7417b0e51b14be8e915539950084
  $fTextShowAcceptTime_str :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# " Accept-Time: "#) -}
fd72e2f00a4111630324a00ded8475e7
  $fTextShowPacket :: TextShow.Classes.TextShow Parser.Types.Packet
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Parser.Types.Packet
                  Parser.Types.$fTextShowPacket_$cshowbPrec
                  Parser.Types.$fTextShowPacket_$cshowb
                  Parser.Types.$fTextShowPacket_$cshowbList
                  Parser.Types.$fTextShowPacket_$cshowtPrec
                  Parser.Types.$fTextShowPacket_$cshowt
                  Parser.Types.$fTextShowPacket_$cshowtList
                  Parser.Types.$fTextShowPacket_$cshowtlPrec
                  Parser.Types.$fTextShowPacket_$cshowtl
                  Parser.Types.$fTextShowPacket_$cshowtlList -}
fd72e2f00a4111630324a00ded8475e7
  $fTextShowPacket_$cshowb ::
    Parser.Types.Packet -> Data.Text.Internal.Builder.Builder
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U,U,U,U),1*U(U,U,U,U,U),1*U(U,U,U,U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Parser.Types.Packet) ->
                 case w of ww { Parser.Types.Packet ww1 ww2 ww3 ->
                 Parser.Types.$w$cshowb ww1 ww2 ww3 }) -}
fd72e2f00a4111630324a00ded8475e7
  $fTextShowPacket_$cshowbList ::
    [Parser.Types.Packet] -> Data.Text.Internal.Builder.Builder
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Parser.Types.Packet]) ->
                 TextShow.Classes.showbListWith
                   @ Parser.Types.Packet
                   Parser.Types.$fTextShowPacket_$cshowb
                   eta) -}
fd72e2f00a4111630324a00ded8475e7
  $fTextShowPacket_$cshowbPrec ::
    GHC.Types.Int
    -> Parser.Types.Packet -> Data.Text.Internal.Builder.Builder
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Int) (eta :: Parser.Types.Packet) ->
                 Parser.Types.$fTextShowPacket_$cshowb eta) -}
fd72e2f00a4111630324a00ded8475e7
  $fTextShowPacket_$cshowt ::
    Parser.Types.Packet -> Data.Text.Internal.Text
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U,U,U,U),1*U(U,U,U,U,U),1*U(U,U,U,U,U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Parser.Types.Packet) ->
                 case w of ww { Parser.Types.Packet ww1 ww2 ww3 ->
                 Parser.Types.$w$cshowt ww1 ww2 ww3 }) -}
fd72e2f00a4111630324a00ded8475e7
  $fTextShowPacket_$cshowtList ::
    [Parser.Types.Packet] -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Parser.Types.Packet]) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Parser.Types.$fTextShowPacket_$cshowtlList eta))) -}
fd72e2f00a4111630324a00ded8475e7
  $fTextShowPacket_$cshowtPrec ::
    GHC.Types.Int -> Parser.Types.Packet -> Data.Text.Internal.Text
  {- Arity: 2,
     Strictness: <L,A><S,1*U(1*U(U,U,U,U),1*U(U,U,U,U,U),1*U(U,U,U,U,U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: GHC.Types.Int) (x :: Parser.Types.Packet) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Parser.Types.$fTextShowPacket_$cshowtlPrec p x))) -}
fd72e2f00a4111630324a00ded8475e7
  $fTextShowPacket_$cshowtl ::
    Parser.Types.Packet -> Data.Text.Internal.Lazy.Text
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U,U,U,U),1*U(U,U,U,U,U),1*U(U,U,U,U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Parser.Types.Packet) ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (Parser.Types.$fTextShowPacket_$cshowb x)) -}
fd72e2f00a4111630324a00ded8475e7
  $fTextShowPacket_$cshowtlList ::
    [Parser.Types.Packet] -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Parser.Types.Packet]) ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (Parser.Types.$fTextShowPacket_$cshowbList eta)) -}
fd72e2f00a4111630324a00ded8475e7
  $fTextShowPacket_$cshowtlPrec ::
    GHC.Types.Int
    -> Parser.Types.Packet -> Data.Text.Internal.Lazy.Text
  {- Arity: 2,
     Strictness: <L,A><S,1*U(1*U(U,U,U,U),1*U(U,U,U,U,U),1*U(U,U,U,U,U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: GHC.Types.Int) (x :: Parser.Types.Packet) ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (Parser.Types.$fTextShowPacket_$cshowb x)) -}
ebbb25f2f577a909efb832307243685a
  $fTextShowPktTime :: TextShow.Classes.TextShow Parser.Types.PktTime
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Parser.Types.PktTime
                  Parser.Types.$fTextShowPktTime_$cshowbPrec
                  Parser.Types.$fTextShowPktTime_$cshowb
                  Parser.Types.$fTextShowPktTime_$cshowbList
                  Parser.Types.$fTextShowPktTime_$cshowtPrec
                  Parser.Types.$fTextShowPktTime_$cshowt
                  Parser.Types.$fTextShowPktTime_$cshowtList
                  Parser.Types.$fTextShowPktTime_$cshowtlPrec
                  Parser.Types.$fTextShowPktTime_$cshowtl
                  Parser.Types.$fTextShowPktTime_$cshowtlList -}
ebbb25f2f577a909efb832307243685a
  $fTextShowPktTime_$cshowb ::
    Parser.Types.PktTime -> Data.Text.Internal.Builder.Builder
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (ds :: Parser.Types.PktTime) ->
                 let {
                   ds1 :: Data.Text.Internal.Builder.Builder
                   = Parser.Types.$fTextShowAcceptTime1
                       ds
                         `cast`
                       (Sym (TextShow.FromStringTextShow.N:FromStringShow[0]
                                 (Sym (Parser.Types.N:PktTime[0]))))
                 } in
                 (\ @ s
                    (eta :: Data.Text.Internal.Builder.Buffer s
                            -> GHC.ST.ST s [Data.Text.Internal.Text]) ->
                  let {
                    k :: Data.Text.Internal.Builder.Buffer s
                         -> GHC.ST.ST s [Data.Text.Internal.Text]
                    = ds1 `cast` (Data.Text.Internal.Builder.N:Builder[0]) @ s eta
                  } in
                  letrec {
                    $wloop :: GHC.Prim.MutableByteArray# s
                              -> GHC.Prim.Int#
                              -> GHC.Prim.Int#
                              -> GHC.Prim.Int#
                              -> [GHC.Types.Char]
                              -> GHC.Prim.State# s
                              -> (# GHC.Prim.State# s, [Data.Text.Internal.Text] #)
                      {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><S,1*U><S,U>,
                         Inline: [0] -}
                    = \ (ww :: GHC.Prim.MutableByteArray# s)
                        (ww1 :: GHC.Prim.Int#)
                        (ww2 :: GHC.Prim.Int#)
                        (ww3 :: GHC.Prim.Int#)
                        (w :: [GHC.Types.Char])
                        (w1 :: GHC.Prim.State# s)[OneShot] ->
                      case w of wild1 {
                        []
                        -> (k (Data.Text.Internal.Builder.Buffer @ s ww ww1 ww2 ww3))
                             `cast`
                           (GHC.ST.N:ST[0] <s>_N <[Data.Text.Internal.Text]>_R)
                             w1
                        : ipv4 ipv5
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# ww3 1#) of wild2 {
                             GHC.Types.False
                             -> case ipv4 of wild3 { GHC.Types.C# c# ->
                                let {
                                  x :: GHC.Prim.Int# = GHC.Prim.ord# c#
                                } in
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# x 65536#) of wild4 {
                                  GHC.Types.False
                                  -> let {
                                       i# :: GHC.Prim.Int# = GHC.Prim.+# ww1 ww2
                                     } in
                                     let {
                                       x# :: GHC.Prim.Int# = GHC.Prim.-# x 65536#
                                     } in
                                     case GHC.Prim.writeWord16Array#
                                            @ s
                                            ww
                                            i#
                                            (GHC.Prim.narrow16Word#
                                               (GHC.Prim.int2Word#
                                                  (GHC.Prim.+#
                                                     (GHC.Prim.uncheckedIShiftRA# x# 10#)
                                                     55296#)))
                                            w1 of s2# { DEFAULT ->
                                     case GHC.Prim.writeWord16Array#
                                            @ s
                                            ww
                                            (GHC.Prim.+# i# 1#)
                                            (GHC.Prim.narrow16Word#
                                               (GHC.Prim.int2Word#
                                                  (GHC.Prim.+# (GHC.Prim.andI# x# 1023#) 56320#)))
                                            s2# of s2#1 { DEFAULT ->
                                     $wloop
                                       ww
                                       ww1
                                       (GHC.Prim.+# ww2 2#)
                                       (GHC.Prim.-# ww3 2#)
                                       ipv5
                                       s2#1 } }
                                  GHC.Types.True
                                  -> case GHC.Prim.writeWord16Array#
                                            @ s
                                            ww
                                            (GHC.Prim.+# ww1 ww2)
                                            (GHC.Prim.narrow16Word# (GHC.Prim.int2Word# x))
                                            w1 of s2# { DEFAULT ->
                                     $wloop
                                       ww
                                       ww1
                                       (GHC.Prim.+# ww2 1#)
                                       (GHC.Prim.-# ww3 1#)
                                       ipv5
                                       s2# } } }
                             GHC.Types.True
                             -> case GHC.Prim.unsafeFreezeByteArray#
                                       @ s
                                       ww
                                       w1 of ds2 { (#,#) ipv6 ipv7 ->
                                case GHC.Prim.newByteArray#
                                       @ s
                                       224#
                                       ipv6 of ds3 { (#,#) ipv8 ipv9 ->
                                (# ipv8,
                                   GHC.Types.:
                                     @ Data.Text.Internal.Text
                                     (Data.Text.Internal.Text ipv7 ww1 ww2)
                                     (case $wloop
                                             ipv9
                                             0#
                                             0#
                                             112#
                                             wild1
                                             ipv8 of ds4 { (#,#) ipv10 ipv11 ->
                                      ipv11 }) #) } } } }
                  } in
                  \ (ds2 :: Data.Text.Internal.Builder.Buffer s)
                    (eta1 :: GHC.Prim.State# s)[OneShot] ->
                  case ds2 of wild { Data.Text.Internal.Builder.Buffer dt dt1 dt2 dt3 ->
                  $wloop dt dt1 dt2 dt3 Parser.Types.$fTextShowPktTime_str eta1 })
                   `cast`
                 (Trans
                      (forall (s :: <*>_N).
                       <Data.Text.Internal.Builder.Buffer s
                        -> GHC.ST.ST s [Data.Text.Internal.Text]>_R
                       ->_R <Data.Text.Internal.Builder.Buffer s>_R
                       ->_R Sym (GHC.ST.N:ST[0] <s>_N <[Data.Text.Internal.Text]>_R))
                      (Sym (Data.Text.Internal.Builder.N:Builder[0])))) -}
ebbb25f2f577a909efb832307243685a
  $fTextShowPktTime_$cshowbList ::
    [Parser.Types.PktTime] -> Data.Text.Internal.Builder.Builder
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Parser.Types.PktTime]) ->
                 TextShow.Classes.showbListWith
                   @ Parser.Types.PktTime
                   Parser.Types.$fTextShowPktTime_$cshowb
                   eta) -}
ebbb25f2f577a909efb832307243685a
  $fTextShowPktTime_$cshowbPrec ::
    GHC.Types.Int
    -> Parser.Types.PktTime -> Data.Text.Internal.Builder.Builder
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Int) (eta :: Parser.Types.PktTime) ->
                 Parser.Types.$fTextShowPktTime_$cshowb eta) -}
ebbb25f2f577a909efb832307243685a
  $fTextShowPktTime_$cshowt ::
    Parser.Types.PktTime -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (x :: Parser.Types.PktTime) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Data.Text.Internal.Builder.$wtoLazyTextWith
                         112#
                         (Parser.Types.$fTextShowPktTime_$cshowb x)))) -}
ebbb25f2f577a909efb832307243685a
  $fTextShowPktTime_$cshowtList ::
    [Parser.Types.PktTime] -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Parser.Types.PktTime]) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Parser.Types.$fTextShowPktTime_$cshowtlList eta))) -}
ebbb25f2f577a909efb832307243685a
  $fTextShowPktTime_$cshowtPrec ::
    GHC.Types.Int -> Parser.Types.PktTime -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: GHC.Types.Int) (x :: Parser.Types.PktTime) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Parser.Types.$fTextShowPktTime_$cshowtlPrec p x))) -}
ebbb25f2f577a909efb832307243685a
  $fTextShowPktTime_$cshowtl ::
    Parser.Types.PktTime -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Parser.Types.PktTime) ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (Parser.Types.$fTextShowPktTime_$cshowb x)) -}
ebbb25f2f577a909efb832307243685a
  $fTextShowPktTime_$cshowtlList ::
    [Parser.Types.PktTime] -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Parser.Types.PktTime]) ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (Parser.Types.$fTextShowPktTime_$cshowbList eta)) -}
ebbb25f2f577a909efb832307243685a
  $fTextShowPktTime_$cshowtlPrec ::
    GHC.Types.Int
    -> Parser.Types.PktTime -> Data.Text.Internal.Lazy.Text
  {- Arity: 2, Strictness: <L,A><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: GHC.Types.Int) (x :: Parser.Types.PktTime) ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (Parser.Types.$fTextShowPktTime_$cshowb x)) -}
d3db56f5266ced3ebe8823a755d302f0
  $fTextShowPktTime_str :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# "Packet-Time: "#) -}
9a257db0e028eddde9cd7322df4b4bfb
  $fTextShowQuote :: TextShow.Classes.TextShow Parser.Types.Quote
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Parser.Types.Quote
                  Parser.Types.$fTextShowQuote_$cshowbPrec
                  Parser.Types.$fTextShowQuote_$cshowb
                  Parser.Types.$fTextShowQuote_$cshowbList
                  Parser.Types.$fTextShowQuote_$cshowtPrec
                  Parser.Types.$fTextShowQuote_$cshowt
                  Parser.Types.$fTextShowQuote_$cshowtList
                  Parser.Types.$fTextShowQuote_$cshowtlPrec
                  Parser.Types.$fTextShowQuote_$cshowtl
                  Parser.Types.$fTextShowQuote_$cshowtlList -}
9a257db0e028eddde9cd7322df4b4bfb
  $fTextShowQuote_$cshowb ::
    Parser.Types.Quote -> Data.Text.Internal.Builder.Builder
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Parser.Types.Quote) ->
                 case w of ww { Parser.Types.Quote ww1 ww2 ->
                 Parser.Types.$w$cshowb1 ww1 ww2 }) -}
9a257db0e028eddde9cd7322df4b4bfb
  $fTextShowQuote_$cshowbList ::
    [Parser.Types.Quote] -> Data.Text.Internal.Builder.Builder
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Parser.Types.Quote]) ->
                 TextShow.Classes.showbListWith
                   @ Parser.Types.Quote
                   Parser.Types.$fTextShowQuote_$cshowb
                   eta) -}
9a257db0e028eddde9cd7322df4b4bfb
  $fTextShowQuote_$cshowbPrec ::
    GHC.Types.Int
    -> Parser.Types.Quote -> Data.Text.Internal.Builder.Builder
  {- Arity: 2, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Int) (eta :: Parser.Types.Quote) ->
                 Parser.Types.$fTextShowQuote_$cshowb eta) -}
9a257db0e028eddde9cd7322df4b4bfb
  $fTextShowQuote_$cshowt ::
    Parser.Types.Quote -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Parser.Types.Quote) ->
                 case w of ww { Parser.Types.Quote ww1 ww2 ->
                 Parser.Types.$w$cshowt1 ww1 ww2 }) -}
9a257db0e028eddde9cd7322df4b4bfb
  $fTextShowQuote_$cshowtList ::
    [Parser.Types.Quote] -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Parser.Types.Quote]) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Parser.Types.$fTextShowQuote_$cshowtlList eta))) -}
9a257db0e028eddde9cd7322df4b4bfb
  $fTextShowQuote_$cshowtPrec ::
    GHC.Types.Int -> Parser.Types.Quote -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <L,A><S,1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: GHC.Types.Int) (x :: Parser.Types.Quote) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Parser.Types.$fTextShowQuote_$cshowtlPrec p x))) -}
9a257db0e028eddde9cd7322df4b4bfb
  $fTextShowQuote_$cshowtl ::
    Parser.Types.Quote -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Parser.Types.Quote) ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (Parser.Types.$fTextShowQuote_$cshowb x)) -}
9a257db0e028eddde9cd7322df4b4bfb
  $fTextShowQuote_$cshowtlList ::
    [Parser.Types.Quote] -> Data.Text.Internal.Lazy.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: [Parser.Types.Quote]) ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (Parser.Types.$fTextShowQuote_$cshowbList eta)) -}
9a257db0e028eddde9cd7322df4b4bfb
  $fTextShowQuote_$cshowtlPrec ::
    GHC.Types.Int -> Parser.Types.Quote -> Data.Text.Internal.Lazy.Text
  {- Arity: 2, Strictness: <L,A><S,1*U(1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: GHC.Types.Int) (x :: Parser.Types.Quote) ->
                 Data.Text.Internal.Builder.$wtoLazyTextWith
                   112#
                   (Parser.Types.$fTextShowQuote_$cshowb x)) -}
9cda5d2bfb07ad181ec3fbbe497b861d
  $tc'AcceptTime :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10450989427078102193##
                   209243447286054564##
                   Parser.Types.$trModule
                   Parser.Types.$tc'AcceptTime1) -}
fdd8be568010eb44849a6c90c4bf45cb
  $tc'AcceptTime1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'AcceptTime"#) -}
4e948a76be6b09fb86c16019643b9773
  $tc'Packet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5958606260371403019##
                   6004757955846806549##
                   Parser.Types.$trModule
                   Parser.Types.$tc'Packet1) -}
3144d30393431d5afcb012caf02489d9
  $tc'Packet1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Packet"#) -}
9f1ff89f28612470a0397fa7025d9162
  $tc'PktTime :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16828981905218187211##
                   2184462620670137120##
                   Parser.Types.$trModule
                   Parser.Types.$tc'PktTime1) -}
5586d6fdf85949358519e7f24ffb33a2
  $tc'PktTime1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'PktTime"#) -}
acbc4f254f4913eaf55458ad73fd3218
  $tc'Quote :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17294608758176661883##
                   16935297784905467114##
                   Parser.Types.$trModule
                   Parser.Types.$tc'Quote1) -}
d5df18acb364f7157fbf51c04fa4c688
  $tc'Quote1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Quote"#) -}
b43895a02af9a487dc78134d61813634
  $tcAcceptTime :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16364603848381398275##
                   9046295058972940325##
                   Parser.Types.$trModule
                   Parser.Types.$tcAcceptTime1) -}
79ad20bb1657f7c631880af82b6d836e
  $tcAcceptTime1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "AcceptTime"#) -}
5628322b09c04bb8f82298323b162c9f
  $tcPacket :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8929530897379769587##
                   2706583489297152425##
                   Parser.Types.$trModule
                   Parser.Types.$tcPacket1) -}
52d23d512696a7fe5a79b007c3e24a5e
  $tcPacket1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Packet"#) -}
ac5ad817df51e373887d1797f49b3dd2
  $tcPktTime :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8223381464740904521##
                   852947406681329786##
                   Parser.Types.$trModule
                   Parser.Types.$tcPktTime1) -}
8457ee4336dd7ef3dc4d61f70ee533ae
  $tcPktTime1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "PktTime"#) -}
987e34a833009cb6f50efc5139e48fe7
  $tcQuote :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   938432738963100847##
                   6090449116215181101##
                   Parser.Types.$trModule
                   Parser.Types.$tcQuote1) -}
ca3e99a5289a1a6773c467744bcde5e6
  $tcQuote1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Quote"#) -}
5a373044b908eb2f201ddce86ead4aeb
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Parser.Types.$trModule2
                   Parser.Types.$trModule1) -}
615b973693e00dda4cb10e9196948ad4
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Parser.Types"#) -}
3c95d610d7160d712a5f8a53381f0c4e
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "Kospi200-0.1.0.0-HbCXTMBKnMfBwS3lExfzgt"#) -}
982895c74f41604b9c88485820d83f75
  $w$cshowb ::
    Data.ByteString.Internal.ByteString
    -> Parser.Types.Bids
    -> Parser.Types.Asks
    -> Data.Text.Internal.Builder.Builder
  {- Arity: 3,
     Strictness: <L,1*U(U,U,U,U)><L,1*U(U,U,U,U,U)><L,1*U(U,U,U,U,U)>,
     Inline: [0] -}
cc03b088aed9f5cf6e47c847587dbdcc
  $w$cshowb1 ::
    GHC.Types.Int
    -> GHC.Types.Int -> Data.Text.Internal.Builder.Builder
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U(U)>, Inline: [0] -}
7faa7d99697af393020b105c08d70934
  $w$cshowt ::
    Data.ByteString.Internal.ByteString
    -> Parser.Types.Bids
    -> Parser.Types.Asks
    -> Data.Text.Internal.Text
  {- Arity: 3,
     Strictness: <L,1*U(U,U,U,U)><L,1*U(U,U,U,U,U)><L,1*U(U,U,U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Data.ByteString.Internal.ByteString)
                   (ww1 :: Parser.Types.Bids)
                   (ww2 :: Parser.Types.Asks) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Data.Text.Internal.Builder.$wtoLazyTextWith
                         112#
                         (Parser.Types.$w$cshowb ww ww1 ww2)))) -}
bebb61764d6f54e7e1ab57b5abfdb95b
  $w$cshowt1 ::
    GHC.Types.Int -> GHC.Types.Int -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <L,1*U(U)><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Int) (ww1 :: GHC.Types.Int) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Data.Text.Internal.Builder.$wtoLazyTextWith
                         112#
                         (Parser.Types.$w$cshowb1 ww ww1)))) -}
804cfb8471d0f4443ec3a7a12454645c
  newtype AcceptTime = AcceptTime Data.Time.Clock.Scale.DiffTime
b7e38be6a15bcec83c40b6d5a06c5af8
  type Asks =
    (Parser.Types.Quote, Parser.Types.Quote, Parser.Types.Quote,
     Parser.Types.Quote, Parser.Types.Quote)
c2ce4ee9e37bb40b468e476187e8e227
  type Bids =
    (Parser.Types.Quote, Parser.Types.Quote, Parser.Types.Quote,
     Parser.Types.Quote, Parser.Types.Quote)
fd72e2f00a4111630324a00ded8475e7
  data Packet
    = Packet {issueCode :: Data.ByteString.Internal.ByteString,
              bids :: Parser.Types.Bids,
              asks :: Parser.Types.Asks}
ebbb25f2f577a909efb832307243685a
  newtype PktTime = PktTime Data.Time.Clock.Scale.DiffTime
9a257db0e028eddde9cd7322df4b4bfb
  data Quote
    = Quote {quantity :: GHC.Types.Int, price :: GHC.Types.Int}
0e931ce9659563745f8162dc30c73008
  asks :: Parser.Types.Packet -> Parser.Types.Asks
  RecSel Left Parser.Types.Packet
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS),1*U(A,A,1*U(U,U,U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Parser.Types.Packet) ->
                 case ds of wild { Parser.Types.Packet ds1 ds2 ds3 -> ds3 }) -}
3a5a1f1f1834a307364ec6e931146226
  bids :: Parser.Types.Packet -> Parser.Types.Bids
  RecSel Left Parser.Types.Packet
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U(U,U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Parser.Types.Packet) ->
                 case ds of wild { Parser.Types.Packet ds1 ds2 ds3 -> ds2 }) -}
15634310cd65454dba727f11d50272b6
  issueCode ::
    Parser.Types.Packet -> Data.ByteString.Internal.ByteString
  RecSel Left Parser.Types.Packet
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Parser.Types.Packet) ->
                 case ds of wild { Parser.Types.Packet ds1 ds2 ds3 -> ds1 }) -}
6315de04b604777a151c5bce8666ef40
  price :: Parser.Types.Quote -> GHC.Types.Int
  RecSel Left Parser.Types.Quote
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Parser.Types.Quote) ->
                 case ds of wild { Parser.Types.Quote ds1 ds2 -> ds2 }) -}
a5b2c9ec7cb27d1d732221c0d22b8e1c
  quantity :: Parser.Types.Quote -> GHC.Types.Int
  RecSel Left Parser.Types.Quote
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Parser.Types.Quote) ->
                 case ds of wild { Parser.Types.Quote ds1 ds2 -> ds1 }) -}
instance GHC.Classes.Eq [Parser.Types.AcceptTime]
  = Parser.Types.$fEqAcceptTime
instance GHC.Classes.Eq [Parser.Types.PktTime]
  = Parser.Types.$fEqPktTime
instance GHC.Classes.Ord [Parser.Types.AcceptTime]
  = Parser.Types.$fOrdAcceptTime
instance GHC.Classes.Ord [Parser.Types.PktTime]
  = Parser.Types.$fOrdPktTime
instance TextShow.Classes.TextShow [Parser.Types.AcceptTime]
  = Parser.Types.$fTextShowAcceptTime
instance TextShow.Classes.TextShow [Parser.Types.Packet]
  = Parser.Types.$fTextShowPacket
instance TextShow.Classes.TextShow [Parser.Types.PktTime]
  = Parser.Types.$fTextShowPktTime
instance TextShow.Classes.TextShow [Parser.Types.Quote]
  = Parser.Types.$fTextShowQuote
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

